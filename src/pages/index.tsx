import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { useState } from "react";

//Enunciado ejercicio 1
/* 
Algoritmo que solicite n cantidad de numeros, una vez los haya solicitado, los numeros
deben de quedar en un arrreglo. Una vez que esten en el arreglo, se debe de ordenar de
menor a mayor y guardarlo en otro arreglo y mostrar en pantalla.

1.Crear un input para ingresar un número que sea el tamaño del array
2.Crear un botón que al hacer click genere un array con numeros con el tamaño del input anterior y que el usuario ingrese los numeros
3.Crear un botón que al hacer click ordene el array de menor a mayor
*/

export default function Home() {
  //Input para ingresar un número que sea el tamaño del array
  const [numero, setNumero] = useState(0); //Tamaño del array, Línea 18:1 operación de declaración y asignación de variable de estado.
  //Array de numeros aleatorios
  const [arrayNumeros, setArrayNumeros] = useState<number[]>([]); //Array de numeros aleatorios, Línea 20: 1 operaciones de declaración y asignación de variables de estado.
  //Array ordenado de menor a mayor 
  const [arrayOrdenado, setArrayOrdenado] = useState<number[]>([]); //Array ordenado de menor a mayor, Línea 22: 1 operaciones de declaración y asignación de variables de estado

  //1.Crear un input para ingresar un número que sea el tamaño del array
  const handleChange = (e: any) => {
    //Guardar el numero en el estado
    setNumero(Number(e.target.value)); //Línea 27: 2 operaciones en total: asignación del evento a la variable "e" y llamada a la función "setNumero()" con una conversión de tipo.
  };

  //2.Crear un botón que al hacer click genere un array con numeros con el tamaño del input anterior y que el usuario ingrese los numeros
  const generarArray = () => {
    //Generar un array de numeros ingresados por el usuario
    /* 
    Línea 39,40: 3 operaciones - declaración y asignación de variable, creación de objeto, y llamada a la función "Array.from()".
    Línea 43: 1 operación - llamada a la función "setArrayNumeros()".
    Línea 46: 2 operaciones - declaración y asignación de variable, y llamada a la función "Array.sort()".
    Línea 47: 1 operación - llamada a la función "setArrayOrdenado()".
    */
    const arrayNumerosIngresados = Array.from({ length: numero }, () => //"Array.from()" en JavaScript crea una nueva instancia de un array a partir de un objeto iterable o de un objeto similar a una matriz (como un objeto con propiedad length y elementos indexados numéricamente).
      Number(prompt("Ingrese un numero"))
    );
    //Guardar el array en el estado
    setArrayNumeros(arrayNumerosIngresados);

    //Ordenar el array de menor a mayor
    const arrayOrdenado = arrayNumerosIngresados.sort((a, b) => a - b);
    setArrayOrdenado(arrayOrdenado);
    /*
    El método "sort()" ordena los elementos de un array en su lugar y devuelve el array ordenado. 
    El orden de los elementos se determina llamando a la función de comparación repetidamente para pares 
    de elementos hasta que no queden elementos que comparar. La función de comparación determina el orden 
    relativo de los elementos comparados mediante un retorno de valor negativo, cero o positivo.
    */
  };

  //3. Imprimir el array ordenado en pantalla
  const imprimirArray = () => {
    /*
    Línea 59: 1 operación - llamada al método "Array.map()".
    Línea 60: 2 operaciones - declaración y asignación de variable, y creación de un elemento "li".
    Línea 60: 1 operación - asignación del valor del elemento "li".
    Línea 60: 1 operación - asignación de una clave única al elemento "li".
    En total, 5 operaciones por cada iteración del método "map()".
    */
    return arrayOrdenado.map((numero, index) => {
      return <li key={index}>{numero}</li>;
    });
  };

  return (
    <>
      <Head>
        <title>Arreglo Numeros Ordenados</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <p>
            Para ver el codigo del programa&nbsp;
            <code className={styles.code}>src/pages/index.tsx</code>
          </p>
        </div>

        <div className={styles.main}>
          <h1 className={styles.h1}>
            Algoritmo numeros ordenados en el arreglo
          </h1>
          <p className={styles.p}>
            El usuario determina el tamaño del arreglo y el programa genera una
            ventana emergente para que el usuario ingrese los numeros hasta
            llenar el array con el tamaño ingresado. Una vez lleno el arreglo,
            el programa ordena los numeros de menor a mayor y los imprime en
            pantalla.
          </p>
          {/* 1.Crear un input para ingresar un número que sea el tamaño del array */}
          {/* Tamaño del arreglo: */}
          <label htmlFor="numero" className={styles.h1}>Tamaño del arreglo:</label>
          <input
            type="number"
            name="numero"
            id="numero"
            className={styles.input}
            onChange={handleChange}
          />
          <p className={styles.p}>
            Cuando ingrese el tamaño ejecute el boton generar el arreglo este
            desplega una ventana emergente para llenar el tamaño del arreglo con
            los numeros que le ingreses.
          </p>
          {/* 2.Crear un botón que al hacer click genere un array con numeros con el tamaño del input anterior */}
          <button onClick={generarArray} className={styles.button}>Generar array</button>
          {/* 4. Imprimir el array ordenado en pantalla */}
          <ul className={styles.ul}>{imprimirArray()}</ul>
        </div>
      </main>
    </>
  );
}
